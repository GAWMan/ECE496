n = 1:SAMPLES;
m = 1:CHANNELS;

%% Initialize Variables
    sample = simout(:,2:15);
%% Transforms and Filters
    %Zero out the negligible from the signal
    for q = 1:CHANNELS
        for j = 1:SAMPLES 
            min_sample(q) = min(sample(:,q));
            zeroed_sample(j,q) = sample(j,q) - min_sample(q);
        end
    end
    %Carries out the discrete wavelet transformation on every channel and
    %filters out insignificant frequencies
    for j = 1:CHANNELS
        F(:,j) = fft(sample(:,j));
        F(1:floor((SAMPLES/5)),j) = 0;
        filt_sample(:,j) = ifft(F(:,j));
        [dwt_data(:,j),L(:,j)] = wavedec(sample(:,j),BANDS,'sym8');
    end

    %Calculates the discrete coefficients for each band on every channel
    for j = 1:CHANNELS
        DCELL(:,j) = detcoef(dwt_data(:,j), L(:,j), [1:BANDS]);
    end

    for j = 1:BANDS
        ratio(j) = length(DCELL{1,1}) / length(DCELL{j,1});
    end

    for q = 1:CHANNELS
        for j = 1:BANDS
            for i = 1:length(DCELL{1,1});
                D(j,i,q) = DCELL{j,q}(min (length(DCELL{j,1}),(ceil(i/ratio(j)))));
            end
        end
    end

    SEGMENT_SIZE = SAMPLES;
    ANALYSIS_1_CHANNELS = 8;

    k = 0;
    sum_mean = 0;
    sum_power = 0;
    sum_max = 0;
    var_sum = 0;
    var_filt_sum = 0;

    for q = [1,2,3,4,11,12,13,14];
        %K refers to specific channel, instead of using 1,2,3,4,11,12,13,14 it now goes 1-8
        k = k+1;     
        sum(k) = 0;    
             %Reorganizes from the simout format which is rows = samples
             %and columns = channels to a format in which rows = channels
             %and columns = channels
             for j = 1:SEGMENT_SIZE
                 segment(k,j) = filt_sample(j,q);
                 sum(k) = sum(k) + segment(k,j); %Sums all the samples in the specific channel k
             end     

        
        mean(k) = sum(k)/SEGMENT_SIZE; %Calculates mean value of the signal on channel k
        actualpower(k) = mean(k)^2; %Calculates average power of the signal on channel k
        sum_mean= sum_mean + mean(k)/ANALYSIS_1_CHANNELS; %Calculates mean value of the signal for all channels
        sum_power = sum_power + actualpower(k)/ANALYSIS_1_CHANNELS; %Calculates average power of the signal for all channels
      
        [max_val(k), max_ind(k)] = max(segment(k,:)); %Calculates the maximum value of the position and when it occurs for every channel
        
        % Gives a mean value for points around the maximum point for all channels being
        % considered
        near_max(k) = 0;
        for i = 1:11
            near_max(k) = near_max(k) + segment(k,max(1,min(SEGMENT_SIZE,(max_ind(k) - 5 + i))))/11;
        end 
        sum_max = sum_max + near_max(k)/ANALYSIS_1_CHANNELS;


        % Probability

        %Retrieves variation for each channel and sum the variation of every channel
        var_sample(k) = var(segment(k,:));
        var_sum = var_sum + var_sample(k);

        %Filters out the signal from channel k where there is a maximum value (peak amplitude/blink) to make it
        %equal to the mean value of the channel's signal
        filt_seg(k,:) = segment(k,:);
        for j = 1:36
            filt_seg(k,max(1,min(SEGMENT_SIZE,(max_ind(k) - 10 + j)))) = mean(k);
        end 
        %Retrieves variation for each channel and sum the variation of
        %every channel for the modified signal with the peaks filtered out
        var_filt_sample(k) = var(filt_seg(k,:));
        var_filt_sum = var_filt_sum + var_filt_sample(k);
    end

    %Observes the variation ratio between the variation of the signal with
    %the peak amplitudes and the signals with the peak amplitudes filtered
    %out
    var_ratio = var_sum / var_filt_sum;

    %Check the straight sum, make sure the maximum is higher than the mean
    if((sum_max - sum_mean > 15))
        %Check the variances, make sure it dropped after filtering
        if(var_ratio > 3)
            %we won the lottery and found a blink! (probably)
            blink = 1;        
            figure;
            for j = 1:CHANNELS
                subplot(6,3,j);
                ylabel(sprintf('Channel %d' ,j));
                plot(n, filt_sample(:,j));
            end
        end
    else
        blink = 0;
    end                                                                         

