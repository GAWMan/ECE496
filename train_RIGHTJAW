function train_RIGHTJAW(source, eventdata)
    
    %Retrieve parameters from the GUI to determine what type of training
    params = guidata(source);
    live = params.live;
    
    %Display formatting
    f_train = figure('Visible','off',...
                'Color',[0 0 1],...
                'NumberTitle','off','Name','Training!',...
                'Position',[200,200,500,300]);
    text_train = uicontrol(f_train,'Style','text',...
                    'FontSize',[25],...
                    'BackgroundColor',[0 0 1],...
                    'Visible','off',...
                    'Position',[50 100 400 130])
    %Constants
    SAMPLINGRATE = 128;
    CHANNELS = 14;
    
    %Channels of Interest = F7 & F8  and other parameters
    jaw_channel_set = [1,2,3,4,11,12,13,14];
    counter = 1;
    limit = 0;
    tstart = 0;
    tfinish = 0;
    leftjawon = 0;
    rightjawon = 0;
    bothjawson = 0;
    
    %Decide if live to determine how data is taken
    if(live == 0)
        %Load Training Data
        [hdr, record1] = edfread('RyanJaw-3Feb7-07.02.14.15.48.33.edf');
        [hdr, record2] = edfread('Ryan-1Feb7-07.02.14.15.41.19.edf');
        [hdr, record3] = edfread('JawFeb9.edf');
        [hdr, record4] = edfread('Jaw2Feb9.edf');
        record = [record1];
        markers = record(36,:);
    else
        %Get Training Data Live
        a = EmotivEEG;
        a.Run;
        
        set(f_train,'Visible','on');
        set(text_train,'Visible','off');
        markers = [0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,0];
    end 
    if(live == 0)
        limit = length(record); 
        condition = (SAMPLINGRATE/2)*(counter) + 64;
    else
        limit = length(markers);
        condition = 1;
    end
        while(condition <= limit)
            tic;
            if (live==0)
                marker = max(markers(1,(((SAMPLINGRATE/2)*(counter-1))+1:(((SAMPLINGRATE/2)*(counter))+64))));
                sample = record(3:16,(((SAMPLINGRATE/2)*(counter-1))+1:(((SAMPLINGRATE/2)*(counter))+64)))';
                if (leftjawon == 1 || marker == 11)
                    left_jaw_clench(counter) = 2;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 3; 
                elseif (rightjawon == 1 || marker == 21)
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 2; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 2; 
                elseif (bothjawson == 1 || marker == 31)
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 2;
                    jaw_out(counter) = 1; 
                else 
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 0; 
                end
            else
                if (leftjawon == 1 || markers(counter) == 11)
                    set(text_train,'Visible','on','String','Please clench your left jaw and keep it clenched');
                    left_jaw_clench(counter) = 2;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 3; 
                elseif (rightjawon == 1 || markers(counter) == 21)
                    set(text_train,'Visible','on','String','Please clench your right jaw and keep it clenched');
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 2; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 2; 
                elseif (bothjawson == 1 || markers(counter) == 31)
                    set(text_train,'Visible','on','String','Please clench both jaws and keep it clenched');
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 2;
                    jaw_out(counter) = 1; 
                else 
                    set(text_train,'Visible','on','String','Please try to keep your eyes open');
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 0; 
                end
                record(1:128,1:14)= a.data(1:128,4:17);
                sample = record; 
                marker = markers(count);
            end
            
          
            %Calculate Variance, Power, Ratio of Power
            k = 0;
            for j = jaw_channel_set;
                %use k instead of loop_set, goes from 1-8
                k = k+1;
                %Calculate the variances in all the wink samples
                jaw_var(counter,k) = var(sample(:,j));

                %Fourier Transform of EEG data on specified channel
                F(k,:) = fft(sample(:,j), SAMPLINGRATE);
                jaw_power(counter,k) = 0;

                %Take power of frequencies across 32-48Hz
                for i = 33:49
                    jaw_power(counter,k) = jaw_power(counter,k)+ abs(F(k,i))^2;
                end

                %Normalizing Jaw Power
                jaw_power(counter,k) = jaw_power(counter,k)/16;
                jaw_power_sum(counter) = jaw_power_sum(counter) + jaw_power(counter,k)/8;
            end

            %Calculating ratios of power
            for j = 1:4
                left_jaw_power(counter) = left_jaw_power(counter) + jaw_power(counter,j);
                right_jaw_power(counter) = right_jaw_power(counter) + jaw_power(counter,j+4);
                jaw_var_sum(counter,1) = jaw_var_sum(counter,1) + jaw_var(counter,j);
                jaw_var_sum(counter,2) = jaw_var_sum(counter,2) + jaw_var(counter,j+4);
            end
            jaw_p_ratio(counter,1) = left_jaw_power(counter)/right_jaw_power(counter);
            jaw_p_ratio(counter,2) = right_jaw_power(counter)/left_jaw_power(counter);
            
            %Calculating ratios of variance
            jaw_var_ratio(counter,1) = jaw_var_sum(counter,1)/jaw_var_sum(counter,2);
            jaw_var_ratio(counter,2) = jaw_var_sum(counter,2)/jaw_var_sum(counter,1);
            
            %Calculating correlation
            sigma_count = 0;
            sigma_count = 0;
            for i = 1:4
                for j = 15-i
                    C = corrcoef(sample(:,i), sample(:,j));
                    jaw_sigma(counter,i) = C(2,1);
                end
            end  
            
            if (marker == 10)
                leftjawon = 1;
            elseif (marker == 11)
                leftjawon = 0;
            elseif (marker == 20)
                rightjawon = 1;
            elseif (marker == 21)
                rightjawon = 0;
            elseif (marker == 30)
                bothjawson = 1;
            elseif (marker == 31)
                bothjawson = 0;
            end
            
            if(live==1 && i==length(markers))
                a.Stop;
                delete(a);
            end
           
            %Increment Counter
            counter = counter + 1;
            
            %Update condition accordingly
            if(live == 0)
                condition = (SAMPLINGRATE/2)*(counter+1) + 64;
            else 
                condition = condition + 1;
                %Time Waiting if Live
                tfinish = toc;
                if(tfinish<0.5)
                    pause(0.5-tfinish);
                    display(tfinish);
                end
            end
        end
        
        %Data to be utilized for training 
        data = [jaw_var_ratio,jaw_sigma, jaw_power_sum',left_jaw_power', right_jaw_power', jaw_p_ratio];
        
        %Used for calculating the length of the row vectors in data
        data_size = size(data);
        data_param = data_size(2);
        
        %Training for right
        training_target_r = right_jaw_clench';
        
        %Training Parameters for the Right Jaw
        %Training Machines: Multinomial Logistic Regression Machine,
        %Artificial Neural Network, Support Vector Machine, K Nearest
        %Neighbour, & Linear Discriminant Analysis
        j_B_r = mnrfit(data(:,1:data_param),training_target_r);
        j_net_r = feedforwardnet(5);
        j_net_r.trainParam.showWindow = 0;
        j_net_r = train(j_net_r,data(:,1:data_param)',training_target_r');   
        j_SVM_r = svmtrain(data(:,1:data_param)',training_target_r,'autoscale','true','kernel_function','rbf');
        j_KNN_r = ClassificationKNN.fit(data(:,1:data_param),training_target_r,'NumNeighbors',20);
        j_LDA_r = ClassificationDiscriminant.fit(data(:,1:data_param),training_target_r);
        
        %For the Training Inception Purposes
        for i=1:counter-1
            jaw_right_LR(i) = 2-1/(1+exp(-dot(j_B_r,[1 data(i,1:data_param)])));
        end
        jaw_right_ANN = sim(j_net_r,data(:,1:data_param)');
        jaw_right_SVM = svmclassify(j_SVM_r,data(:,1:data_param));
        jaw_right_KNN = predict(j_KNN_r,data(:,1:data_param));
        jaw_right_LDA = predict(j_LDA_r,data(:,1:data_param));
        j_learning_data_r = [jaw_right_ANN' jaw_right_LR' jaw_right_SVM jaw_right_KNN jaw_right_LDA];
        j_B_r_ensemble = mnrfit(j_learning_data_r,training_target_r);
        
        savefile = 'rightjawparams.mat';
        save(savefile,'j_B_r_ensemble','j_B_r','j_net_r','j_SVM_r','j_KNN_r','j_LDA_r');
        
        params = guidata(source);
        params.trainedrightjaw = 1;
        guidata(source,params);
end
