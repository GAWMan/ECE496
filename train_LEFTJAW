function train_LEFTJAW(source, eventdata)
    
    %Retrieve parameters from the GUI to determine what type of training
    params = guidata(source);
    live = params.live;
    stop = 0;
    params.stop = 0;
    guidata(source,params);
    
    %Display formatting
    f_train = figure('Visible','off',...
                'Color',[0 0 1],...
                'NumberTitle','off','Name','Training!',...
                'Position',[200,200,500,300]);
    ha = axes('units','normalized', ...
            'position',[0 0 1 1]);
    uistack(ha,'bottom');
    I=imread('MessageDisplay.jpg');
    hi = imagesc(I);
    colormap gray;
    set(ha,'handlevisibility','off', ...
                'visible','off');
    text_train = uicontrol(f_train,'Style','text',...
                    'FontSize',[25],...
                    'BackgroundColor',[0 0 1],...
                    'ForegroundColor',[1 1 1],...
                    'Visible','off',...
                    'Position',[50 70 400 120]);
    %Constants
    SAMPLINGRATE = 128;
    CHANNELS = 14;
    
    %Channels of Interest = F7 & F8  and other parameters
    jaw_channel_set = [1,2,3,4,11,12,13,14];
    counter = 1;
    limit = 0;
    tstart = 0;
    tfinish = 0;
    leftjawon = 0;
    traincount = 7;
    clenchcount = 3;
    
    %Decide if live to determine how data is taken
    if(live == 0)
        set(f_train,'Visible','on');
        set(text_train,'Visible','on','String','Training in Progress');
        pause(0.1);
        
        %Load Training Data
        [hdr, record1] = edfread('RyanJaw-3Feb7-07.02.14.15.48.33.edf');
        [hdr, record2] = edfread('Ryan-1Feb7-07.02.14.15.41.19.edf');
        [hdr, record3] = edfread('JawFeb9.edf');
        [hdr, record4] = edfread('Jaw2Feb9.edf');
        [hdr, record5] = edfread('AllMar29.edf');
        record = [record1 record2 record3 record4 record5];
        markers = record(36,:);
    else
        %Get Training Data Live
        a = EmotivEEG;
        a.Run;
        
        set(f_train,'Visible','on');
        set(text_train,'Visible','off');
        m_l = 10;
        for i = 1:6
            markers(m_l*(i-1)+1:m_l*i) = [0,0,0,0,0,0,0,10,0,11];
        end
    end
    if(live == 0)
        limit = length(record); 
        condition = (SAMPLINGRATE/2)*(counter) + 64;
    else
        limit = length(markers);
        condition = 1;
    end
        while(condition <= limit)
            if (live==0)
                marker = max(markers(1,(((SAMPLINGRATE/2)*(counter-1))+1:(((SAMPLINGRATE/2)*(counter))+64))));
                sample = record(3:16,(((SAMPLINGRATE/2)*(counter-1))+1:(((SAMPLINGRATE/2)*(counter))+64)))';
                if (leftjawon == 1 || marker == 11 || marker == 10)
                    left_jaw_clench(counter) = 2;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 3; 
                else 
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 0; 
                end
            else
                
                if (leftjawon == 1 || markers(counter) == 11 || markers(counter) == 10)
                    set(text_train,'Visible','on','String',strcat('Please clench your left jaw and keep it clenched: [',num2str(clenchcount),']'));
                    traincount = 7;
                    clenchcount = clenchcount - 1;
                    left_jaw_clench(counter) = 2;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 3; 
                else 
                    set(text_train,'Visible','on','String',strcat('Please try to keep still and relaxed: [',num2str(traincount),']'));
                    clenchcount = 3;
                    traincount = traincount - 1;
                    left_jaw_clench(counter) = 1;
                    right_jaw_clench(counter) = 1; 
                    jaws_clenched(counter) = 1;
                    jaw_out(counter) = 0; 
                end
                pause(1-tfinish);
                tic;
                sample = a.data(1:128,4:17);
                marker = markers(counter);
            end
            
          
            %Calculate Variance, Power, Ratio of Power
            k = 0;
            jaw_power_sum(counter) = 0;
            for j = jaw_channel_set;
                %use k instead of loop_set, goes from 1-8
                k = k+1;
                %Calculate the variances in all the wink samples
                jaw_var(counter,k) = var(sample(:,j));

                %Fourier Transform of EEG data on specified channel
                F(k,:) = fft(sample(:,j), SAMPLINGRATE);
                jaw_power(counter,k) = 0;

                %Take power of frequencies across 32-48Hz
                for i = 33:49
                    jaw_power(counter,k) = jaw_power(counter,k)+ abs(F(k,i))^2;
                end

                %Normalizing Jaw Power
                jaw_power(counter,k) = jaw_power(counter,k)/16;
                jaw_power_sum(counter) = jaw_power_sum(counter) + jaw_power(counter,k)/8;
            end

            %Calculating ratios of power
            left_jaw_power(counter) = 0;
            right_jaw_power(counter) =0;
            jaw_var_sum(counter,1:2) =0;
            for j = 1:4
                left_jaw_power(counter) = left_jaw_power(counter) + jaw_power(counter,j);
                right_jaw_power(counter) = right_jaw_power(counter) + jaw_power(counter,j+4);
                jaw_var_sum(counter,1) = jaw_var_sum(counter,1) + jaw_var(counter,j);
                jaw_var_sum(counter,2) = jaw_var_sum(counter,2) + jaw_var(counter,j+4);
            end
            jaw_p_ratio(counter,1) = left_jaw_power(counter)/right_jaw_power(counter);
            jaw_p_ratio(counter,2) = right_jaw_power(counter)/left_jaw_power(counter);
            
            %Calculating ratios of variance
            jaw_var_ratio(counter,1) = jaw_var_sum(counter,1)/jaw_var_sum(counter,2);
            jaw_var_ratio(counter,2) = jaw_var_sum(counter,2)/jaw_var_sum(counter,1);
            
            %Calculating correlation
            sigma_count = 0;
            sigma_count = 0;
            for i = 1:4
                for j = 15-i
                    C = corrcoef(sample(:,i), sample(:,j));
                    jaw_sigma(counter,i) = C(2,1);
                end
            end  
            
            %Set [direction]jawon whenever jaws are clenched, which is
            %indicated by the marker
            if (marker == 10)
                leftjawon = 1;
            elseif (marker == 11)
                leftjawon = 0;
            end
           
            %Increment Counter
            counter = counter + 1;
            
            %Update condition accordingly
            if(live == 0)
                condition = (SAMPLINGRATE/2)*(counter+1) + 64;
            else 
                condition = condition + 1;
                %Processing Time if Live
                tfinish = toc;
            end
            
            %Check if stop program requested training to cease
            params = guidata(source);
            stop = params.stop;
            if(stop == 1)
                break;
            end
        end
        
        %Shut down hardware and close training window
        if(live==1)
            a.Stop;
            delete(a);
            set(f_train,'Visible','off');
        end
        
        %Check if training was interrupted
        if(stop==0)
            %Data to be utilized for training 
            data = [jaw_var_ratio,jaw_sigma, jaw_power_sum',left_jaw_power', right_jaw_power', jaw_p_ratio];

            %Used for calculating the length of the row vectors in data
            data_size = size(data);
            data_param = data_size(2);

            %Traiing for left
            training_target_l = left_jaw_clench';

            %Training Parameters for the Left Jaw
            %Training Machines: Multinomial Logistic Regression Machine,
            %Artificial Neural Network, Support Vector Machine, K Nearest
            %Neighbour, & Linear Discriminant Analysis
            j_B_l = mnrfit(data(:,1:data_param),training_target_l);
            j_net_l = feedforwardnet(5);
            j_net_l.trainParam.showWindow = 0;
            j_net_l = train(j_net_l,data(:,1:data_param)',training_target_l');   
            j_SVM_l = svmtrain(data(:,1:data_param)',training_target_l,'autoscale','true','kernel_function','rbf');
            j_KNN_l = ClassificationKNN.fit(data(:,1:data_param),training_target_l,'NumNeighbors',20);
            j_LDA_l = ClassificationDiscriminant.fit(data(:,1:data_param),training_target_l);

            %For the Training Inception Purposes
            for i=1:counter-1
                jaw_left_LR(i) = 2-1/(1+exp(-dot(j_B_l,[1 data(i,1:data_param)])));
            end
            jaw_left_ANN = sim(j_net_l,data(:,1:data_param)');
            jaw_left_SVM = svmclassify(j_SVM_l,data(:,1:data_param));
            jaw_left_KNN = predict(j_KNN_l,data(:,1:data_param));
            jaw_left_LDA = predict(j_LDA_l,data(:,1:data_param));
            j_learning_data_l = [jaw_left_ANN' jaw_left_LR' jaw_left_SVM jaw_left_KNN jaw_left_LDA];
            j_B_l_ensemble = mnrfit(j_learning_data_l,training_target_l);

            savefile = 'leftjawparams.mat';
            save(savefile,'j_B_l_ensemble','j_B_l','j_net_l','j_SVM_l','j_KNN_l','j_LDA_l');

            params = guidata(source);
            params.trainedleftjaw = 1;
            guidata(source,params);
            
            set(f_train,'Visible','on');
            set(text_train,'Visible','on','ForegroundColor',[0 1 0],'String','Training Successful');
            pause(2);
            set(f_train,'Visible','off');
            
        else
            set(f_train,'Visible','on');
            set(text_train,'Visible','on','ForegroundColor',[1 0 0],'String','Training Unsuccessful');
            pause(2);
            set(f_train,'Visible','off');
        end
end
