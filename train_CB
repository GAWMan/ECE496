function train_CB(source,eventdata)
 
%% Paramaters and variables used
params = guidata(source);
live = params.live;
SAMPLES = 128;%length(record);
f_train = figure('Visible','off',...
            'Color',[0 0 1],...
            'NumberTitle','off','Name','Training!',...
            'Position',[360,250,500,300]);
        
text_train = uicontrol(f_train,'Style','text',...
                'FontSize',[25],...
                'BackgroundColor',[0 0 1],...
                'Visible','off',...
                'Position',[50 100 400 130]);         

%only load hdr if not live
if(live == 0)
    [hdr, record] = edfread('Ryan-jawmov1-28.11.13.22.01.35.edf');

%% this is the pattern followed by the data
train_data_jaw = [0,0,3,3,0,0,2,2,0,0,1,1,0,0];
for i = 1:length(train_data_jaw)
training_target_l(i) = 1;
training_target_r(i) = 1;
training_target_b(i) = 1;
    if (train_data_jaw(i) == 1)
        training_target_b(i) = 2;
    elseif (train_data_jaw(i) == 2)
        training_target_r(i) = 2;
    elseif (train_data_jaw(i) == 3)
        training_target_l(i) = 2;
    end
end



%% main loop
for count = 1:length(train_data_jaw)
LOOP_NUM = count;
        
%% initialize data, changes whether live or not
if(live == 1)
    %run live
    
    %show the figure
    set(f_train,'Visible','on');
    set(text_train,'Visible','off');

    
    if (train_data_jaw(count) == 1)
        set(text_train,'Visible','on','String','Please clench both jaws now');
    elseif (train_data_jaw(count) == 2)
        set(text_train,'Visible','on','String','Please clench your right jaw now');
    elseif (train_data_jaw(count) == 3)
        set(text_train,'Visible','on','String','Please clench your left jaw now');
    end
    
    % get samples from live stream
    simOut = sim('simulinkcode.slx');
    sample = simout(:,2:15);
    
else  
    %run off sample
    sample = record(3:16,(SAMPLES*(count-1))+1:(SAMPLES*(count)))';
end


%% analysis - jaw state - cannot be in a function, we need too many variables

%determines if the subject is clenching their jaw
%inputs: LOOP_NUM, sample
% *the variable sample needs to have 128 samples exactly*
%outputs: jaws_clenched

%first thing that has to be done is some filtering
%take frequencies above 32hz, when you clench your jaw it's high frequency
%and high power.
jaw_power(LOOP_NUM) = 0;
k = 0;
jaw_power_sum(LOOP_NUM) = 0;

for j = [1,2,3,4,11,12,13,14];
    %instead of using 1,2,3,4,11,12,13,14 it now goes 1-8
    k = k+1; 
    
    F(k,:) = fft(sample(:,j));
    jaw_power(LOOP_NUM,k) = 0;
    
    %selects frequencies from 32-48 Hz
    for i = 33:49;
        jaw_power(LOOP_NUM,k) = jaw_power(LOOP_NUM,k)+ abs(F(k,i))^2;
    end
    
    %normalize for the range of frequencies being sampled, in this case
    %looking at 16 frequencies
    jaw_power(LOOP_NUM,k) = jaw_power(LOOP_NUM,k)/16;
    jaw_power_sum(LOOP_NUM) = jaw_power_sum(LOOP_NUM) + jaw_power(LOOP_NUM,k)/8;
end

%determine powers in the right and left jaws as well as the ratio between
%them
left_jaw_power(LOOP_NUM) = 0;
right_jaw_power(LOOP_NUM) = 0;
L_R_jaw_power(LOOP_NUM) = 0;
R_L_jaw_power(LOOP_NUM) = 0;
for j = 1:4
    left_jaw_power(LOOP_NUM) = left_jaw_power(LOOP_NUM) + jaw_power(LOOP_NUM,j)/4;
    right_jaw_power(LOOP_NUM) = right_jaw_power(LOOP_NUM) + jaw_power(LOOP_NUM,j+4)/4;
end
L_R_jaw_power(LOOP_NUM) = left_jaw_power(LOOP_NUM)/right_jaw_power(LOOP_NUM);
R_L_jaw_power(LOOP_NUM) = 1/L_R_jaw_power(LOOP_NUM);

   
end


%% Train the jaw clench and find the B's

data = [jaw_power_sum', L_R_jaw_power', R_L_jaw_power',train_data_jaw'];

% training for left
training_data_l = data(:,[1:3]);
[B_l, dev_l] = mnrfit(training_data_l,training_target_l);
for i=1:LOOP_NUM
    left_jaw_clench_LR(i) = 2-1/(1+exp(-dot(B_l,[1 training_data_l(i,1:3)])));
end

% training for right
training_data_r = data(:,[1:3]);
[B_r, dev_r]  = mnrfit(training_data_r,training_target_r);
for i=1:LOOP_NUM
    right_jaw_clench_LR(i) = 2-1/(1+exp(-dot(B_r,[1 training_data_r(i,1:3)])));
end

% training for both
training_data_b = data(:,[1:3]);
B_b = mnrfit(training_data_b,training_target_b);
for i=1:LOOP_NUM
    jaws_clench_LR(i) = 2-1/(1+exp(-dot(B_b,[1 training_data_b(i,1:3)])));
end

%% depricated - used to look at the data

data = [data,left_jaw_clench_LR',right_jaw_clench_LR',jaws_clench_LR'];

jaw_cell_data(1,1:8) = {'','Sum','L/R','R/L','Output','Left Guess','Right Guess','Both'};
jaw_cell_data(2:LOOP_NUM+1,1) = num2cell(1:LOOP_NUM);
jaw_cell_data(2:LOOP_NUM+1,2:8) = num2cell(data);

params = guidata(source);
params.data = jaw_cell_data;
guidata(source,params);

%% See if the values found will work, and add them to the data for the rest of the function

% lessons in british royalty
% the kings are the average output of the Logistic Regression when it is
% supposed to be 2. The closer to 2 the better!
princes = [left_jaw_clench_LR',right_jaw_clench_LR',jaws_clench_LR'];
fail = 0;
counts(1:3) = 0;
dukes(1:3) = 0;
kings(1:3) = 0;
for i = 1:3
    for j = 1:LOOP_NUM
        if(train_data_jaw(j) == i)
            dukes(i) = dukes(i) + princes(j,4-i);
            counts(i) = counts(i) +1;
        end
    end
    kings(i) = dukes(i) / counts(i);
    if(kings(i) < 1.7)
        fail = 1;
    end
end 

params = guidata(source);
if(fail == 1)
    % LR did not resolve to any degree of accuracy
    params.results = kings;
    set(text_train,'Visible','on',...
        'String','Linear Regression did not converge, please try training again.',...
        'BackgroundColor',[1 0 0]);
    params.trained = 0;
else
    % lr did resolve
    set(text_train,'Visible','on',...
        'String','Linear Regression converged, training complete!',...
        'BackgroundColor',[0 1 0]);
    params.B_jaw_left = B_l;
    params.B_jaw_right = B_r;
    params.B_jaw_both = B_b;
    params.results = kings;
    params.trained = 1;
end

guidata(source,params);

% close the window used for training, if it was running live and there was
% an actual window
if(live == 1)
    pause(2.5);
    set(f_train,'Visible','off');
end
  


end
